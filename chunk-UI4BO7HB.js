import{Aa as t,Ab as E,Ba as m,G as h,L as g,M as S,Ob as b,Sa as e,Ta as o,Ua as x,aa as s,da as l,oa as c,qa as r,sb as f,za as i}from"./chunk-J6TELLLA.js";function D(n,d){if(n&1&&(i(0,"tr")(1,"td"),e(2),t(),i(3,"td"),e(4),t(),i(5,"td")(6,"code"),e(7),t()(),m(8,"td",6),t()),n&2){let a=d.$implicit;l(2),o(a.name),l(2),o(a.type),l(3),o(a.default),l(),r("innerHTML",a.details,s)}}function z(n,d){if(n&1&&(i(0,"tr")(1,"td"),e(2),t(),i(3,"td")(4,"code"),e(5),t()(),m(6,"td",6),t()),n&2){let a=d.$implicit;l(2),o(a.name),l(3),o(a.value),l(),r("innerHTML",a.details,s)}}function C(n,d){if(n&1&&(i(0,"tr")(1,"td"),e(2),t(),i(3,"td")(4,"code"),e(5),t()(),m(6,"td",6),t()),n&2){let a=d.$implicit;l(2),o(a.name),l(3),o(a.type),l(),r("innerHTML",a.details,s)}}function w(n,d){if(n&1&&(i(0,"tr")(1,"td"),e(2),t(),i(3,"td"),e(4),t(),i(5,"td")(6,"code"),e(7),t()(),m(8,"td",6),t()),n&2){let a=d.$implicit;l(2),o(a.name),l(2),o(a.type),l(3),o(a.default),l(),r("innerHTML",a.details,s)}}function _(n,d){if(n&1&&(i(0,"tr")(1,"td"),e(2),t(),i(3,"td"),e(4),t(),m(5,"td",6),t()),n&2){let a=d.$implicit;l(2),o(a.name),l(2),o(a.type),l(),r("innerHTML",a.details,s)}}function T(n,d){if(n&1&&(i(0,"tr")(1,"td")(2,"code"),e(3),t()(),m(4,"td",6),t()),n&2){let a=d.$implicit;l(3),x("--as-",a.name,""),l(),r("innerHTML",a.details,s)}}function I(n,d){if(n&1&&(i(0,"tr")(1,"td")(2,"code"),e(3),t()(),m(4,"td",6),t()),n&2){let a=d.$implicit;l(3),o(a.name),l(),r("innerHTML",a.details,s)}}function M(n,d){if(n&1&&(i(0,"tr")(1,"td")(2,"code"),e(3),t()(),m(4,"td",6),t()),n&2){let a=d.$implicit;l(3),o(a.name),l(),r("innerHTML",a.details,s)}}function A(n,d){if(n&1&&(i(0,"tr")(1,"td")(2,"code"),e(3),t()(),m(4,"td",6),t()),n&2){let a=d.$implicit;l(3),o(a.name),l(),r("innerHTML",a.details,s)}}var y=(()=>{class n{constructor(){this.splitDoc={inputs:[{name:"dir",type:"SplitDir",default:'"ltr"',details:'Indicates the directionality of the areas: <code>"ltr"</code> (left to right) or <code>"rtl"</code> (right to left).'},{name:"direction",type:"SplitDirection",default:'"horizontal"',details:'Select split direction: <code>"horizontal"</code> or <code>"vertical"</code>.'},{name:"disabled",type:"boolean",default:"false",details:"Disable the dragging feature (remove cursor/image on gutters). <code>(gutterClick)</code>/<code>(gutterDblClick)</code> still emits."},{name:"gutterAriaLabel",type:"string",default:"undefined",details:"Aria label for the gutter."},{name:"gutterDblClickDuration",type:"number",default:"0",details:"Milliseconds to detect a double click on a gutter. Set it around 300-500ms if you want to use <code>(gutterDblClick)</code> event."},{name:"gutterSize",type:"number",default:"11",details:"Gutters's size (dragging elements) in pixels."},{name:"gutterStep",type:"number",default:"1",details:"Gutter step while moving in pixels."},{name:"restrictMove",type:"boolean",default:"false",details:"Set to <code>true</code> if you want to limit gutter move to adjacent areas only."},{name:"unit",type:"SplitUnit",default:'"percent"',details:'Selected unit you want to use: <code>"percent"</code> or <code>"pixel"</code> to specify area sizes.'},{name:"useTransition",type:"boolean",default:"false",details:"Add transition when toggling visibility using <code>[visible]</code> or <code>[size]</code> changes"}],outputs:[{name:"dragEnd",value:"SplitGutterInteractionEvent",details:"Emit when drag ends."},{name:"dragStart",value:"SplitGutterInteractionEvent",details:"Emit when drag starts."},{name:"gutterDblClick",value:"SplitGutterInteractionEvent",details:"Emit when user double clicks on a gutter. See <code>[gutterDblClickDuration]</code> input."},{name:"gutterClick",value:"SplitGutterInteractionEvent",details:"Emit when user clicks on a gutter. See <code>[gutterDblClickDuration]</code> input."},{name:"transitionEnd",value:"SplitAreaSize[]",details:'Emit when transition ends (could be triggered from <code>[visible]</code> or <code>[size]</code> changes).<br>Only if <code>[useTransition]="true"</code>'}],class:[{name:"dragProgress$",type:"Observable<SplitGutterInteractionEvent>",details:"Emits when dragging (mouse or keyboard).<br><u>Warning: Running outside zone by design.</u><br/>If you need to notify angular use <code>this.ngZone.run(() => ...));</code>"}]},this.splitAreaDoc={inputs:[{name:"lockSize",type:"boolean",default:"false",details:`Lock area size, same as <code>minSize</code> = <code>maxSize</code> = <code>size</code>.<br><u>Not working when <code>[size]="'*'"</code></u>`},{name:"maxSize",type:"SplitAreaSize",default:'"*"',details:`Maximum pixel or percent size, should be equal to or larger than provided <code>[size]</code>.<br><u>Not working when <code>[size]="'*'"</code></u>`},{name:"minSize",type:"SplitAreaSize",default:'"*"',details:`Minimum pixel or percent size, should be equal to or smaller than provided <code>[size]</code>.<br><u>Not working when <code>[size]="'*'"</code></u>`},{name:"size",type:"SplitAreaSize | 'auto'",default:'"auto"',details:`Size of the area in selected unit (<code>percent</code>/<code>pixel</code>).<br><u>Percent mode:</u> All areas sizes should equal to 100 or if there is a wildcard size (<code>[size]="'*'"</code>) should be less than 100. If no size input is declared on all areas - all areas will have the same size.<br><u>Pixel mode:</u> An area with  wildcard size (<code>[size]="'*'"</code>) is mandatory (only one) and can't have <code>[visible]="false"</code> or <code>minSize</code>/<code>maxSize</code>/<code>lockSize</code> properties.`},{name:"visible",type:"boolean",default:"true",details:`Hide area visually but still present in the DOM, use <code>ngIf/@if</code> to completely remove it.<br><u>Not working when <code>[size]="'*'"</code></u>`}]},this.splitGutterDoc={templateContext:[{name:"areaBefore",type:"SplitAreaComponent",details:"The area before the gutter. In RTL the right area and in LTR the left area"},{name:"areaAfter",type:"SplitAreaComponent",details:"The area after the gutter. In RTL the left area and in LTR the right area"},{name:"gutterNum",type:"number",details:"The absolute number of the gutter based on direction (RTL and LTR). First gutter is 1, second is 2, etc..."},{name:"first",type:"boolean",details:"Whether this is the first gutter. In RTL the most right area and in LTR the most left area"},{name:"last",type:"boolean",details:"Whether this is the last gutter. In RTL the most left area and in LTR the most right area"},{name:"isDragged",type:"boolean",details:"Whether the gutter is being dragged now"}]},this.cssClasses={split:[{name:"as-horizontal / as-vertical",details:'Depends on <code>&lt;as-split [direction]="x"&gt;</code>.'},{name:"as-disabled",details:'Added when <code>&lt;as-split [disabled]="true"&gt;</code>.'},{name:"as-transition",details:'Added when <code>&lt;as-split [useTransition]="true"&gt;</code>.'},{name:"as-dragging",details:"Added while a gutter is dragged."}],area:[{name:"as-split-area",details:"Added on all areas."},{name:"as-hidden",details:'Added when <code>&lt;as-split-area [visible]="false"&gt;</code>.'}],gutter:[{name:"as-split-gutter",details:"Added on all gutters."},{name:"as-dragged",details:"Added on gutter while dragged."}]},this.themeInfo=[{name:"gutter-background-color",details:"The gutter background color"},{name:"gutter-icon-horizontal",details:"Gutter icon in horizontal mode"},{name:"gutter-icon-vertical",details:"Gutter icon in vertical mode"},{name:"gutter-icon-disabled",details:"Gutter icon when gutter is disabled"},{name:"transition-duration",details:"Size change transition duration for animation"},{name:"gutter-disabled-cursor",details:"Gutter cursor when gutter is disabled"}]}static{this.\u0275fac=function(u){return new(u||n)}}static{this.\u0275cmp=g({type:n,selectors:[["sp-doc"]],decls:209,vars:9,consts:[[1,"container"],[1,"sel"],[1,"selContent"],[1,"table","table-striped"],[4,"ngFor","ngForOf"],[2,"width","40%"],[3,"innerHTML"]],template:function(u,p){u&1&&(i(0,"div",0)(1,"h4")(2,"b"),e(3,"SplitComponent"),t(),e(4,"\xA0"),i(5,"span",1),e(6,"(selector: '"),i(7,"span",2),e(8,"as-split"),t(),e(9,"' / exportAs: '"),i(10,"span",2),e(11,"asSplit"),t(),e(12,"')"),t()(),i(13,"table",3)(14,"thead")(15,"tr")(16,"th"),e(17,"Inputs"),t(),i(18,"th"),e(19,"Type"),t(),i(20,"th"),e(21,"Default"),t(),i(22,"th"),e(23,"Details"),t()()(),i(24,"tbody"),c(25,D,9,4,"tr",4),t()(),i(26,"table",3)(27,"thead")(28,"tr")(29,"th"),e(30,"Outputs"),t(),i(31,"th"),e(32,"Value"),t(),i(33,"th"),e(34,"Details"),t()()(),i(35,"tbody"),c(36,z,7,3,"tr",4),t()(),i(37,"table",3)(38,"thead")(39,"tr")(40,"th"),e(41,"Access from TS class"),t(),i(42,"th"),e(43,"Type"),t(),i(44,"th"),e(45,"Details"),t()()(),i(46,"tbody"),c(47,C,7,3,"tr",4),t()(),m(48,"br")(49,"br"),i(50,"h4")(51,"b"),e(52,"SplitAreaComponent"),t(),e(53,"\xA0"),i(54,"span",1),e(55,"(selector: '"),i(56,"span",2),e(57,"as-split-area"),t(),e(58,"' / exportAs: '"),i(59,"span",2),e(60,"asSplitArea"),t(),e(61,"')"),t()(),i(62,"table",3)(63,"thead")(64,"tr")(65,"th"),e(66,"@Input()"),t(),i(67,"th"),e(68,"Type"),t(),i(69,"th"),e(70,"Default"),t(),i(71,"th"),e(72,"Details"),t()()(),i(73,"tbody"),c(74,w,9,4,"tr",4),t()(),m(75,"br")(76,"br"),i(77,"h4")(78,"b"),e(79,"SplitGutterDirective"),t(),e(80,"\xA0"),i(81,"span",1),e(82,"(selector: '"),i(83,"span",2),e(84,"[asSplitGutter]"),t(),e(85," ')"),t()(),i(86,"p"),e(87,"Used as structural directive ("),i(88,"code"),e(89,"*asSplitGutter"),t(),e(90,") to customize the gutter."),t(),i(91,"p"),e(92,"Mostly requires "),i(93,"code"),e(94,"width: 100%"),t(),e(95," and "),i(96,"code"),e(97,"height: 100%"),t(),e(98," in order to fill the whole gutter."),t(),i(99,"p"),e(100," If the custom gutter is wider than the declared gutter size (using "),i(101,"code"),e(102,"gutterSize"),t(),e(103," input) the areas will overflow too. So attention is required to match the size of the gutter. "),t(),i(104,"table",3)(105,"thead")(106,"tr")(107,"th"),e(108,"Template context property"),t(),i(109,"th"),e(110,"Type"),t(),i(111,"th"),e(112,"Details"),t()()(),i(113,"tbody"),c(114,_,6,3,"tr",4),t()(),m(115,"br")(116,"br"),i(117,"h4")(118,"b"),e(119,"SplitGutterDragHandleDirective"),t(),e(120,"\xA0"),i(121,"span",1),e(122,"(selector: '"),i(123,"span",2),e(124,"[asSplitGutterDragHandle]"),t(),e(125," ')"),t()(),i(126,"p"),e(127,"Used to declare an area inside "),i(128,"code"),e(129,"asSplitGutter"),t(),e(130," to be a drag handle"),t(),i(131,"p"),e(132,"Can be declared on multiple elements which means all of them are drag handles."),t(),m(133,"br")(134,"br"),i(135,"h4")(136,"b"),e(137,"SplitGutterExcludeFromDragDirective"),t(),e(138,"\xA0"),i(139,"span",1),e(140,"(selector: '"),i(141,"span",2),e(142,"[asSplitGutterExcludeFromDrag]"),t(),e(143," ')"),t()(),i(144,"p"),e(145,"Used to declare an area inside "),i(146,"code"),e(147,"asSplitGutter"),t(),e(148," to be excluded from drag"),t(),i(149,"p"),e(150,"Can be declared on multiple elements which means all of them are excluded from drag."),t(),i(151,"p")(152,"code"),e(153,"asSplitGutterExcludeFromDrag"),t(),e(154," inside "),i(155,"code"),e(156,"asSplitGutterDragHandle"),t(),e(157," works as expected (all of the element is a handle except the excluded area) "),t(),i(158,"p")(159,"code"),e(160,"asSplitGutterDragHandle"),t(),e(161," inside "),i(162,"code"),e(163,"asSplitGutterExcludeFromDrag"),t(),e(164," is ignored and the whole element marked with exclude is excluded. "),t(),m(165,"br")(166,"br"),i(167,"h4")(168,"b"),e(169,"Theme"),t()(),i(170,"table",3)(171,"thead")(172,"tr")(173,"th",5),e(174,"CSS variable"),t(),i(175,"th"),e(176,"Details"),t()()(),i(177,"tbody"),c(178,T,5,2,"tr",4),t()(),i(179,"h4")(180,"b"),e(181,"CSS classes"),t()(),i(182,"table",3)(183,"thead")(184,"tr")(185,"th",5),e(186,"Split element classes"),t(),i(187,"th"),e(188,"Details"),t()()(),i(189,"tbody"),c(190,I,5,2,"tr",4),t()(),i(191,"table",3)(192,"thead")(193,"tr")(194,"th",5),e(195,"Area element classes"),t(),i(196,"th"),e(197,"Details"),t()()(),i(198,"tbody"),c(199,M,5,2,"tr",4),t()(),i(200,"table",3)(201,"thead")(202,"tr")(203,"th",5),e(204,"Gutter element classes"),t(),i(205,"th"),e(206,"Details"),t()()(),i(207,"tbody"),c(208,A,5,2,"tr",4),t()()()),u&2&&(l(25),r("ngForOf",p.splitDoc.inputs),l(11),r("ngForOf",p.splitDoc.outputs),l(11),r("ngForOf",p.splitDoc.class),l(27),r("ngForOf",p.splitAreaDoc.inputs),l(40),r("ngForOf",p.splitGutterDoc.templateContext),l(64),r("ngForOf",p.themeInfo),l(12),r("ngForOf",p.cssClasses.split),l(9),r("ngForOf",p.cssClasses.area),l(9),r("ngForOf",p.cssClasses.gutter))},dependencies:[f],styles:["[_nghost-%COMP%]{display:block;width:100%;margin:50px 0}h4[_ngcontent-%COMP%]{margin:20px 0}.sel[_ngcontent-%COMP%]{font-size:16px;color:#adadad}tr[_ngcontent-%COMP%] > th[_ngcontent-%COMP%]{color:#adadad}tr[_ngcontent-%COMP%] > th[_ngcontent-%COMP%]:first-child, .selContent[_ngcontent-%COMP%]{font-weight:700;color:#ffc421}tr[_ngcontent-%COMP%] > td[_ngcontent-%COMP%]:first-child{font-weight:700}"]})}}return n})();var F=(()=>{class n{static{this.\u0275fac=function(u){return new(u||n)}}static{this.\u0275mod=S({type:n})}static{this.\u0275inj=h({imports:[E,b.forChild([{path:"",component:y}])]})}}return n})();export{F as DocumentationModule};
