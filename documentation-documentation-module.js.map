{"version":3,"sources":["./src/app/documentation/documentation.component.html","./src/app/documentation/documentation.component.ts","./src/app/documentation/documentation.module.ts"],"names":[],"mappings":"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","file":"documentation-documentation-module.js","sourcesContent":["export default \"<div class=\\\"container\\\">\\n  <h4>\\n    <b>SplitComponent</b>&nbsp;<span class=\\\"sel\\\"\\n      >(selector: '<span class=\\\"selContent\\\">as-split</span>' / exportAs: '<span class=\\\"selContent\\\">asSplit</span\\n      >')</span\\n    >\\n  </h4>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th>@Input()</th>\\n        <th>Type</th>\\n        <th>Default</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let prop of splitDoc.inputs\\\">\\n        <td>{{ prop.name }}</td>\\n        <td>{{ prop.type }}</td>\\n        <td>\\n          <code>{{ prop.default }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"prop.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th>@Output()</th>\\n        <th>Value</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let event of splitDoc.outputs\\\">\\n        <td>{{ event.name }}</td>\\n        <td>\\n          <code>{{ event.value }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"event.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th>Access from TS class</th>\\n        <th>Type</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let item of splitDoc.class\\\">\\n        <td>{{ item.name }}</td>\\n        <td>\\n          <code>{{ item.type }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"item.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <br /><br />\\n\\n  <h4>\\n    <b>SplitAreaDirective</b>&nbsp;<span class=\\\"sel\\\"\\n      >(selector: '<span class=\\\"selContent\\\">as-split-area, [as-split-area]</span>' / exportAs: '<span class=\\\"selContent\\\"\\n        >asSplitArea</span\\n      >')</span\\n    >\\n  </h4>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th>@Input()</th>\\n        <th>Type</th>\\n        <th>Default</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let prop of splitAreaDoc.inputs\\\">\\n        <td>{{ prop.name }}</td>\\n        <td>{{ prop.type }}</td>\\n        <td>\\n          <code>{{ prop.default }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"prop.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <br /><br />\\n\\n  <h4><b>CSS classes</b></h4>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th style=\\\"width: 40%\\\">Split element classes</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let x of cssClasses.split\\\">\\n        <td>\\n          <code>{{ x.name }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"x.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th style=\\\"width: 40%\\\">Area element classes</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let x of cssClasses.area\\\">\\n        <td>\\n          <code>{{ x.name }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"x.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th style=\\\"width: 40%\\\">Gutter element classes</th>\\n        <th>Details</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let x of cssClasses.gutter\\\">\\n        <td>\\n          <code>{{ x.name }}</code>\\n        </td>\\n        <td [innerHTML]=\\\"x.details\\\"></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\";","import { Component } from '@angular/core'\n\n@Component({\n  selector: 'sp-doc',\n  styles: [\n    `\n      :host {\n        display: block;\n        width: 100%;\n        margin: 50px 0;\n      }\n      h4 {\n        margin: 20px 0;\n      }\n      .sel {\n        font-size: 16px;\n        color: #adadad;\n      }\n      tr > th {\n        color: #adadad;\n      }\n      tr > th:first-child,\n      .selContent {\n        font-weight: bold;\n        color: #ffc421;\n      }\n      tr > td:first-child {\n        font-weight: bold;\n      }\n    `,\n  ],\n  templateUrl: './documentation.component.html',\n})\nexport class DocumentationComponent {\n  readonly splitDoc = {\n    inputs: [\n      {\n        name: 'dir',\n        type: 'string',\n        default: '\"ltr\"',\n        details:\n          'Indicates the directionality of the areas: <code>\"ltr\"</code> (left to right) or <code>\"rtl\"</code> (right to left).',\n      },\n      {\n        name: 'direction',\n        type: 'string',\n        default: '\"horizontal\"',\n        details: 'Select split direction: <code>\"horizontal\"</code> or <code>\"vertical\"</code>.',\n      },\n      {\n        name: 'disabled',\n        type: 'boolean',\n        default: 'false',\n        details:\n          'Disable the dragging feature (remove cursor/image on gutters). <code>(gutterClick)</code>/<code>(gutterDblClick)</code> still emits.',\n      },\n      {\n        name: 'gutterDblClickDuration',\n        type: 'number',\n        default: '0',\n        details: `Milliseconds to detect a double click on a gutter. Set it around 300-500ms if you want to use <code>(gutterDblClick)</code> event.`,\n      },\n      {\n        name: 'gutterSize',\n        type: 'number',\n        default: '11',\n        details: `Gutters's size (dragging elements) in pixels.`,\n      },\n      {\n        name: 'gutterStep',\n        type: 'number',\n        default: '1',\n        details: `Gutter step while moving in pixels.`,\n      },\n      {\n        name: 'restrictMove',\n        type: 'boolean',\n        default: 'false',\n        details: 'Set to <code>true</code> if you want to limit gutter move to adjacent areas only.',\n      },\n      {\n        name: 'unit',\n        type: 'string',\n        default: '\"percent\"',\n        details: `Selected unit you want to use: <code>\"percent\"</code> or <code>\"pixel\"</code> to specify area sizes.`,\n      },\n      {\n        name: 'useTransition',\n        type: 'boolean',\n        default: 'false',\n        details:\n          'Add transition when toggling visibility using <code>[visible]</code> or <code>[size]</code> changes.<br><u>Warning: Transitions are not working for <a href=\"https://github.com/philipwalton/flexbugs#flexbug-16\">IE/Edge/Safari</a></u>',\n      },\n    ],\n    outputs: [\n      {\n        name: 'dragEnd',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details: 'Emit when drag ends.',\n      },\n      {\n        name: 'dragStart',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details: 'Emit when drag starts.',\n      },\n      {\n        name: 'gutterDblClick',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details: 'Emit when user double clicks on a gutter. See <code>[gutterDblClickDuration]</code> input.',\n      },\n      {\n        name: 'gutterClick',\n        value: '{gutterNum: number, sizes: Array<number>}',\n        details: 'Emit when user clicks on a gutter. See <code>[gutterDblClickDuration]</code> input.',\n      },\n      {\n        name: 'transitionEnd',\n        value: 'Array<number>',\n        details:\n          'Emit when transition ends (could be triggered from <code>[visible]</code> or <code>[size]</code> changes).<br>Only if <code>[useTransition]=\"true\"</code>.<br><u>Warning: Transitions are not working for <a href=\"https://github.com/philipwalton/flexbugs#flexbug-16\">IE/Edge/Safari</a></u>',\n      },\n    ],\n    class: [\n      {\n        name: 'dragProgress$',\n        type: 'Observable<{gutterNum: number, sizes: Array<number>}>',\n        details: `Emit when dragging. Replace old <code>(dragProgress)</code> template event for better flexibility about change detection mechanism.<br><u>Warning: Running outside zone by design, if you need to notify angular add</u> <code>this.splitEl.dragProgress$.subscribe(x => this.ngZone.run(() => this.x = x));</code>`,\n      },\n      {\n        name: 'getVisibleAreaSizes()',\n        type: '() => Array<number>',\n        details: 'Get all <b>visible</b> area sizes.',\n      },\n      {\n        name: 'setVisibleAreaSizes()',\n        type: '(Array<number>) => boolean',\n        details:\n          'Set all <b>visible</b> area sizes in one go, return a boolean to know if input values were correct. Useful when combined with <code>dragProgress$</code> to sync multiple splits.',\n      },\n    ],\n  }\n\n  readonly splitAreaDoc = {\n    inputs: [\n      {\n        name: 'lockSize',\n        type: 'boolean',\n        default: 'false',\n        details: `Lock area size, same as <code>minSize</code> = <code>maxSize</code> = <code>size</code>.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n      {\n        name: 'maxSize',\n        type: 'number',\n        default: 'null',\n        details: `Maximum pixel or percent size, can't be bigger than provided <code>size</code>.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n      {\n        name: 'minSize',\n        type: 'number',\n        default: 'null',\n        details: `Minimum pixel or percent size, can't be smaller than provided <code>size</code>.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n      {\n        name: 'order',\n        type: 'number',\n        default: 'null',\n        details: `Order of the area. Used to maintain the order of areas when toggling their visibility. Toggling area visibility without specifying an <code>order</code> leads to weird behavior`,\n      },\n      {\n        name: 'size',\n        type: \"number|'*'\",\n        default: '-',\n        details: `Size of the area in selected unit (<code>percent</code>/<code>pixel</code>).<br><u>Percent mode:</u> All areas sizes should equal to 100, If not, all areas will have the same size.<br><u>Pixel mode:</u> An area with  wildcard size (<code>[size]=\"'*'\"</code>) is mandatory (only one) and can't have <code>[visible]=\"false\"</code> or <code>minSize</code>/<code>maxSize</code>/<code>lockSize</code> properties.`,\n      },\n      {\n        name: 'visible',\n        type: 'boolean',\n        default: 'true',\n        details: `Hide area visually but still present in the DOM, use <code>ngIf</code> to completely remove it.<br><u>Not working when <code>[size]=\"'*'\"</code></u>`,\n      },\n    ],\n  }\n\n  readonly cssClasses = {\n    split: [\n      { name: 'ui-init', details: 'Added after component initialization.' },\n      {\n        name: 'ui-horizontal / ui-vertical',\n        details: 'Depends on <code>&lt;ui-split [direction]=\"x\"&gt;</code>.',\n      },\n      {\n        name: 'ui-disabled',\n        details: 'Added when <code>&lt;ui-split [disabled]=\"true\"&gt;</code>.',\n      },\n      {\n        name: 'ui-transition',\n        details: 'Added when <code>&lt;ui-split [useTransition]=\"true\"&gt;</code>.',\n      },\n      { name: 'ui-dragging', details: 'Added while a gutter is dragged.' },\n    ],\n    area: [\n      { name: 'ui-split-area', details: 'Added on all areas.' },\n      {\n        name: 'ui-hidden',\n        details: 'Added when <code>&lt;ui-split-area [visible]=\"false\"&gt;</code>.',\n      },\n    ],\n    gutter: [\n      { name: 'ui-split-gutter', details: 'Added on all gutters.' },\n      { name: 'ui-dragged', details: 'Added on gutter while dragged.' },\n    ],\n  }\n}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\nimport { DocumentationComponent } from './documentation.component'\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild([{ path: '', component: DocumentationComponent }])],\n  declarations: [DocumentationComponent],\n})\nexport class DocumentationModule {}\n"],"sourceRoot":"webpack:///"}